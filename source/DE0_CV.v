
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_CV(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,
	input 		          		RESET_N,

	//////////// microSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DATA,

	//////////// SW //////////
	input 		     [9:0]		SW
);


wire clk250;

pll250_0002 pll250_inst (
		.refclk   (CLOCK_50),   //  refclk.clk
		.rst      (rst),      //   reset.reset
		.outclk_0 (clk250), // outclk0.clk
		.locked   ()          // (terminated)
	);



//====================================
//Test if the physical switches on the FPGA work
//====================================
/*
or(HEX5[0], SW[0], 0);
or(HEX5[1], SW[1], 0);
or(HEX5[2], SW[2], 0);
or(HEX5[3], SW[3], 0);
or(HEX5[4], SW[4], 0);
or(HEX5[5], SW[5], 0);
or(HEX5[6], SW[6], 0);

or(HEX4[0], SW[7], 0);
or(HEX4[1], SW[8], 0);
or(HEX4[2], SW[9], 0);
or(HEX4[3], KEY[0], 0);
or(HEX4[4], KEY[1], 0);
or(HEX4[5], KEY[2], 0);
or(HEX4[6], KEY[3], 0);
*/

	
	
//====================================
//Test if the path result changes according to the input
//====================================
/*
reg [31:0] count;
reg slowClock;

initial begin
count = 32'd0;
slowClock = 0;
end

always @ (posedge clk250) begin
	count = count + 1'd1;
	if(count == 32'd250000000) begin
		count = 32'd0;
		slowClock = ~slowClock;
	end
end

wire pathResult;

singlepath_plode_wrapper(pathResult, slowClock);
or(HEX5[0], pathResult, 0);
or(HEX5[1], slowClock, 0);
*/


wire [3:0] dec5, dec4, dec3, dec2, dec1, dec0;
wire [31:0] result;
wire fin;




//delay d0(result, startfin, 1'b1, CLOCK_50);
//decimal_to_7seg dectoseg(dec5, dec4, dec3, dec2, dec1, dec0, result, startfin, CLOCK_50);



//Low to High
LowtoHigh htl(result, fin, clk250);
decimal_to_7seg dectoseg(dec5, dec4, dec3, dec2, dec1, dec0, result, fin, CLOCK_50);


//High to Low
//HightoLow htl(result, fin, clk250);
//decimal_to_7seg dectoseg(dec5, dec4, dec3, dec2, dec1, dec0, result, fin, CLOCK_50);


//multipath htl(result, fin, SW[2:0], clk250);
//decimal_to_7seg dectoseg(dec5, dec4, dec3, dec2, dec1, dec0, result, fin, CLOCK_50);


//multipath_32 htl(result, fin, SW[4:0], clk250);
//decimal_to_7seg dectoseg(dec5, dec4, dec3, dec2, dec1, dec0, result, fin, CLOCK_50);


display g0(HEX0, dec0);
display g1(HEX1, dec1);
display g2(HEX2, dec2);
display g3(HEX3, dec3);
display g4(HEX4, dec4);
display g5(HEX5, dec5);





endmodule
